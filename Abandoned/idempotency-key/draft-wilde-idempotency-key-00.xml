<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>
<rfc category="std" ipr="trust200902" docName="draft-wilde-idempotency-key-00">
   <front>
      <title abbrev="Idempotency-Key">The Idempotency-Key HTTP Header</title>
      <author initials="E." surname="Wilde" fullname="Erik Wilde">
         <organization>CA Technologies</organization>
         <address>
            <email>erik.wilde@dret.net</email>
            <uri>http://dret.net/netdret/</uri>
         </address>
      </author>
      <date day="27" month="February" year="2017"/>
      <abstract>
         <t>...</t>
      </abstract>
      <note title="Note to Readers">
         <t>This draft should be discussed on the <eref target="https://www.ietf.org/mailman/listinfo/apps-discuss">apps-discuss mailing list</eref>.</t>
         <t>Online access to all versions and files is available on <eref target="https://github.com/dret/I-D/tree/master/idempotency-key">github</eref>.</t>
      </note>
   </front>
   <middle>
      <section title="Introduction" anchor="intro">
         <t>...</t>
      </section>
      <section title="Terminology">
         <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>
      </section>
      <section title="Introduction" anchor="introduction">
         <t>Resources on the Web accessible by HTTP <xref target="RFC7231"/> can respond a variety of HTTP methods. Some of HTTP's methods are idempotent, which means that they can be repeated safely without risking unintended side-effects. Idempotency is a useful property because it allows clients to repeat requests in case of error conditions. For idempotent HTTP methods, the ability to repeat them means that clients have an easy way to handle error conditions.</t>
         <t>HTTP explains the concept of "Idempotent Methods" in Section 4.2.2 <xref target="RFC7231"/>:</t>
         <t><list><t>A request method is considered "idempotent" if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request. Of the request methods defined by this specification, PUT, DELETE, and safe request methods are idempotent. [...] Idempotent methods are distinguished because the request can be repeated automatically if a communication failure occurs before the client is able to read the server's response. For example, if a client sends a PUT request and the underlying connection is closed before any response is received, then the client can establish a new connection and retry the idempotent request. It knows that repeating the request will have the same intended effect, even if the original request succeeded, though the response might differ.</t></list></t>
         <t>However, HTTP also has non-idempotent request methods, with POST being the most well-known one. The problem with POST is that it is not safe for clients to repeat requests, because they might (and often will) produce unintended side-effects on the server side if more than one request is received and processed by the server.</t>
         <t>One possible solution to make this problem more manageable is to require clients to create and use unique tokens for POST requests, which can then be used on the server side to correlate repeated requests. If such a mechanism is supported on the server side, clients can safely repeat POST requests and count on the server to only process one of them, should more than one be received by the server.</t>
      </section>
      <section title="The Idempotency-Key HTTP Header Field" anchor="idempotency-key">
         <t>...</t>
      </section>
      <section title="IANA Considerations" anchor="iana">
         <t>This specification defines a response header field for the Hypertext Transfer Protocol (HTTP) that has been registered with the Internet Assigned Numbers Authority (IANA) following the "Registration Procedures for Message Header Fields" <xref target="RFC3864"/>.</t>
         <section title="The Idempotency-Key Request Header" anchor="iana-idempotency-key">
            <t>The Idempotency-Key request header should be added to the permanent registry of message header fields (see <xref target="RFC3864"/>), taking into account the guidelines given by HTTP/1.1 <xref target="RFC7231"/>.</t>
            <t>Header Field Name: Idempotency-Key</t>
            <t>Applicable Protocol: Hypertext Transfer Protocol (HTTP)</t>
            <t>Status: Standard</t>
            <t>Author/Change controller: IETF</t>
            <t>Specification document(s): RFC XXXX</t>
         </section>
      </section>
      <section title="Security Considerations" anchor="security-considerations">
         <t>...</t>
      </section>
      <section title="Implementation Status" anchor="implementation-status">
         <t>Note to RFC Editor: Please remove this section before publication.</t>
         <t>This section records the status of known implementations of the protocol defined by this specification at the time of posting of this Internet-Draft, and is based on a proposal described in RFC 6982 <xref target="RFC6982"/>. The description of implementations in this section is intended to assist the IETF in its decision processes in progressing drafts to RFCs. Please note that the listing of any individual implementation here does not imply endorsement by the IETF. Furthermore, no effort has been spent to verify the information presented here that was supplied by IETF contributors. This is not intended as, and must not be construed to be, a catalog of available implementations or their features. Readers are advised to note that other implementations may exist.</t>
         <t>According to RFC 6982, "this will allow reviewers and working groups to assign due consideration to documents that have the benefit of running code, which may serve as evidence of valuable experimentation and feedback that have made the implemented protocols more mature. It is up to the individual working groups to use this information as they see fit".</t>
         <t>
            <!-- 
RFC 6982: This section, if it appears, should be located just before the "Security Considerations" section and contain, for each existing implementation, some or all of the following:
 -  The organization responsible for the implementation, if any.
 -  The implementation's name and/or a link to a web page describing the implementation.
 -  A brief general description.
 -  The implementation's level of maturity: research, prototype, alpha, beta, production, widely used, etc.
 -  Coverage: which parts of the protocol specification are implemented and which versions of the Internet-Draft were implemented.
 -  Licensing: the terms under which the implementation can be used. For example: proprietary, royalty licensing, freely distributable with acknowledgement (BSD style), freely distributable with requirement to redistribute source (General Public License (GPL) style), and other (specify).
 -  Implementation experience: any useful information the implementers want to share with the community.
 -  Contact information: ideally a person's name and email address, but possibly just a URL or mailing list.
-->
            <list>
               <t>Stripe API: The Stripe API uses Idempotency-Key as an HTTP Header Field, described at <eref target="https://stripe.com/blog/idempotency"/></t>
               <t>GoCardless Pro API: The GoCardless Pro API uses Idempotency-Key as an HTTP Header Field, described at <eref target="https://gocardless.com/blog/idempotency-keys/"/></t>
            </list>
         </t>
      </section>
   </middle>
   <back>
      <references title="Normative References">
         <reference anchor="RFC2119">
            <front>
               <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
               <author initials="S." surname="Bradner" fullname="Scott Bradner">
                  <organization>Harvard University</organization>
                  <address>
                     <postal>
                        <street>1350 Mass. Ave.</street>
                        <street>Cambridge</street>
                        <street>MA 02138</street>
                     </postal>
                     <phone>- +1 617 495 3864</phone>
                  </address>
               </author>
               <date month="March" year="1997"/>
            </front>
            <seriesInfo name="RFC" value="2119"/>
         </reference>
         <reference anchor='RFC3864'>
            <front>
               <title>Registration Procedures for Message Header Fields</title>
               <author initials='G.' surname='Klyne' fullname='G. Klyne'>
                  <organization /></author>
               <author initials='M.' surname='Nottingham' fullname='M. Nottingham'>
                  <organization /></author>
               <author initials='J.' surname='Mogul' fullname='J. Mogul'>
                  <organization /></author>
               <date year='2004' month='September' />
               <abstract>
                  <t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
               </abstract>
            </front>
            <seriesInfo name='BCP' value='90' />
            <seriesInfo name='RFC' value='3864' />
            <format type='TXT' octets='36231' target='http://www.rfc-editor.org/rfc/rfc3864.txt' />
         </reference>
         <reference anchor='RFC6982'>
            <front>
               <title>Improving Awareness of Running Code: The Implementation Status Section</title>
               <author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'>
                  <organization /></author>
               <author initials='A.' surname='Farrel' fullname='A. Farrel'>
                  <organization /></author>
               <date year='2013' month='July' />
               <abstract>
                  <t>This document describes a simple process that allows authors of Internet-Drafts to record the status of known implementations by including an Implementation Status section. This will allow reviewers and working groups to assign due consideration to documents that have the benefit of running code, which may serve as evidence of valuable experimentation and feedback that have made the implemented protocols more mature. The process in this document is offered as an experiment. Authors of Internet-Drafts are encouraged to consider using the process for their documents, and working groups are invited to think about applying the process to all of their protocol specifications. The authors of this document intend to collate experiences with this experiment and to report them to the community.</t>
               </abstract>
            </front>
            <seriesInfo name='RFC' value='6982' />
            <format type='TXT' octets='19358' target='http://www.rfc-editor.org/rfc/rfc6982.txt' />
         </reference>
         <reference anchor='RFC7231'>
            <front>
               <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
               <author initials='R.' surname='Fielding' fullname='R. Fielding'>
                  <organization /></author>
               <author initials='J.' surname='Reschke' fullname='J. Reschke'>
                  <organization /></author>
               <date year='2014' month='June' />
               <abstract>
                  <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t>
               </abstract>
            </front>
            <seriesInfo name='RFC' value='7231' />
            <format type='TXT' octets='235053' target='http://www.rfc-editor.org/rfc/rfc7231.txt' />
         </reference>
      </references>
      <references title="Non-Normative References">
         <reference anchor="RFC5023">
            <front>
               <title>The Atom Publishing Protocol</title>
               <author initials="J." surname="Gregorio" fullname="Joe Gregorio">
                  <organization/>
                  <address/>
               </author>
               <author initials="B." surname="Hora" fullname="Bill de Hora">
                  <organization/>
                  <address/>
               </author>
               <date month="October" year="2010"/>
            </front>
            <seriesInfo name="RFC" value="5023"/>
         </reference>
      </references>
   </back>
</rfc>
