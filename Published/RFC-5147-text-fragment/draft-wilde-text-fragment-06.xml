<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "../rfc2629.dtd">
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="no" ?>
<rfc category="std" ipr="full3978" docName="draft-wilde-text-fragment-06" updates="2046">
	<front>
		<title abbrev="text/plain Fragment Identifiers">URI Fragment Identifiers for the text/plain Media Type</title>
		<author initials="E." surname="Wilde" fullname="Erik Wilde">
			<organization>UC Berkeley</organization>
			<address>
				<postal>
					<street>School of Information</street>
					<city>Berkeley, CA 94720-4600</city>
					<country>U.S.A.</country>
				</postal>
				<phone>+1-510-6432253</phone>
				<email>net.dret@dret.net</email>
				<uri>http://dret.net/netdret/</uri>
			</address>
		</author>
		<author initials="M.J." surname="Duerst" fullname='Martin Duerst (Note: Please write "Duerst" with u-umlaut wherever possible, for example as "D&amp;#252;rst" in XML and HTML.)'>
  <organization>Aoyama Gakuin University</organization>
  <address>
  <postal>
  <street>5-10-1 Fuchinobe</street>
  <city>Sagamihara</city>
  <region>Kanagawa</region>
  <code>229-8558</code>
  <country>Japan</country>
  </postal>
  <phone>+81 42 759 6329</phone>
  <facsimile>+81 42 759 6495</facsimile>
  <email>mailto:duerst@it.aoyama.ac.jp</email>
  <uri>http://www.sw.it.aoyama.ac.jp/D%C3%BCrst/</uri>
  </address>
</author>
<date day="17" month="Jan" year="2007"/>
		<abstract>
			<t>This memo defines URI fragment identifiers for text/plain MIME entities. These fragment identifiers make it possible to refer to parts of a text/plain MIME entity, identified by character count or range, line count or range, or a regular expression. These identification methods can be combined to identify more than one sub-resource of a text/plain MIME entity. Fragment identifiers may also contain hash information to make them more robust.</t>
		</abstract>
	</front>
	<middle>
		<section title="Introduction"><t>This memo updates the text/plain MIME type defined in RFC 2046 <xref target="RFC2046"></xref> by defining URI fragment identifiers for text/plain MIME entities. This makes it possible to refer to parts of a text/plain MIME entity. Such parts can be identifier by character count or range, line count or range, or a regular expression. Hash information can be added to a fragment identifier to make it more robust.</t><t>This section gives an introduction to the general concepts of text/plain MIME entities and URI fragment identifiers, and discusses the need for fragment identifiers for text/plain and deployment issues. <xref target="methods"></xref> discusses the principles and methods on which this memo is based. <xref target="syntax"></xref> gives the syntax, and <xref target="processing"></xref> discusses processing of text/plain fragment identifiers. <xref target="examples"></xref> shows some examples.</t>
			
			<section title="What is text/plain?">
				<t>Internet Media Types as defined in RFC 2045 <xref target="RFC2045"/> and RFC 2046 <xref target="RFC2046"/> are used to identify different types and sub-types of media. RFC 2046 <xref target="RFC2046"/> and RFC 3676 <xref target="RFC3676"/> specify the text/plain media type, which is used for simple, unformatted text. Quoting from RFC 2046 <xref target="RFC2046"/>: "Plain text does not provide for or allow  formatting commands, font attribute specifications, processing instructions, interpretation directives, or content markup. Plain text is seen simply as a linear sequence of characters, possibly interrupted by line breaks or page breaks."</t>
				<t>The text/plain media type does not restrict the character encoding, any character encoding may be used. In the absence of an explicit character encoding declaration, US-ASCII is assumed as the default character encoding. This variability of the character encoding makes it impossible to count characters in a text/plain MIME entity without taking the character encoding into account, because there are many character encodings using more than one octet per character.</t>
				<t>The biggest advantage of text/plain MIME entities is their ease of use and their portability among different platforms. As long as they use popular character encodings (such as US-ASCII or UTF-8), they can be displayed and processed on virtually every computer system. The only remaining interoperability issue is the representation of line endindings, which is discussed in <xref target="lineending"></xref>.</t>
				
			</section>
			<section title="What is a URI Fragment Identifier?">
				<t>URIs are the identification mechanism for resources on the Web. The URI syntax specified in RFC 3986 <xref target="RFC3986"/> includes as part of a URI a fragment identifier, separated by a number sign ('#'). The fragment identifier consists of additional reference information to be interpreted by the user agent after the retrieval action has been successfully completed.  The semantics of a fragment identifier is a property of the data resulting from a retrieval action, regardless of the type of URI used in the reference.  Therefore, the format and interpretation of fragment identifiers is dependent on the media type of the retrieval result.</t>
				<t>The most popular fragment identifier is defined for text/html (defined in RFC 2854 <xref target="RFC2854"/>), and makes it possible to refer to a specific element (identified by the value of a 'name' or 'id' attribute) of an HTML document.</t>
			</section>
			<section title="Why text/plain Fragment Identifiers?" anchor="why">
				<t>Referring to specific parts of a resource can be very useful, because it enables users and applications to create more specific references. Rather than pointing to a whole resource, users can create references to the part they really are interested in or want to talk about. Even though it is suggested that fragment identification methods are specified in a media type's MIME registration (see <xref target="TypeReg"></xref>), many media types do not have fragment identification methods associated with them.</t>
				<t>Fragment identifiers are only useful if supported by the client, because they are only interpreted by the client. Therefore, a new fragment identification method will require some time to be adopted by clients, and older clients will not support it. However, because the URI still works even if the fragment identifier is not supported (the resource is retrieved, but the fragment identifier is not interpreted), rapid adoption is not highly critical to ensure the success of a new fragment identification method.</t>
				<t>Fragment identifiers for text/plain as defined in this memo make it possible to refer to specific parts of a text/plain MIME entity, using concepts of positions and ranges, which may be applied to characters and lines. They also support locating a fragment by using a regular expression for searching for a specific character sequence. Thus, text/plain fragment identifiers enable users to exchange information more specifically, thereby reducing time and effort that is necessary to manually search for the relevant part of a text/plain MIME entity.</t>
				<t>The text/plain format does not support the embedding of links, so in normal environments, text/plain resources can only serve as targets for links, and not as sources. However, when combining the text/plain fragment identifiers specified in this memo with out-of-line linking mechanisms such as XLink <xref target="XLink"/>, it is possible to "embed" link sources into text/plain resources. Thus, the text/plain fragment identifiers specified in this memo open a path for plain/text files to become fully integrated resources in hypermedia systems such as the Web.</t>
			</section>
			<section title="Incremental Deployment" anchor="incremental">
				<t>As long as support for text/plain fragment identifiers is not implemented everywhere, it is important to consider the implications of incremental deployment. Clients (for example, Web browsers) not supporting the text/plain fragment identifier described in this memo will work with URI references to text/plain MIME entities, but they will fail to locate the sub-resource identified by the fragment identifier. This is a reasonable fallback behavior, and in general users should take into account the possibility that a program interpreting a given URI will fail to interpret the fragment identifier part. Since fragment identifier evaluation is local to the client (and happens after retrieving the MIME entity), there is no way for a server to determine whether a requesting client is using a URI containing a fragment identifier.</t>
			</section><section title="Notation Used in this Memo"><t>The capitalized key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t></section>
		</section>
		<section title="Fragment Identification Methods" anchor="methods">
			<t>The identification of fragments of text/plain MIME entities can be based on different foundations. Since it is not possible to insert explicit, invisible identifiers into a text/plain MIME entity (as for example used in HTML documents, implemented through dedicated attributes), fragment identification has to rely on certain inherent properties of the MIME entity. This memo specifies fragment identification using six different methods, which are character positions and ranges, line positions and ranges, regular expression matching, and a mechanism for improving the robustness of fragment identifiers (entity hashes).</t>
			<t> When interpreting character or line numbers, implementations MUST take the character encoding of the MIME entity into account, because character count and octet count may differ for the character encoding being used. For example, a MIME entity using UTF-16 encoding (as specified in RFC 2718 <xref target="RFC2781"/>) uses two octets per character in most cases, and sometimes four octets per character. It can also have a leading BOM (Byte-Order Mark), which does not count as a character and thus also affects the mapping from a simple octet count to a character count.</t>
			<section title="Fragment Identification Principles"><t>Fragment identification can be done using regular expressions or combining two orthogonal principles, which are positions and ranges, and characters and lines. This section describes the principles themselves, while <xref target="comb-principle"/> describes the combination of the principles.</t>
				
				<section title="Positions and Ranges" anchor="princ-posrang">
						<t>A position does not identify an actual fragment of the MIME entity, but a position inside the MIME entity, which can be regarded as a fragment of zero length. The use case for positions is to provide pointers for applications which may use them to implement functionalities such as "insert some text here", which needs a position rather than a fragment. Positions are counted from zero, position zero being before the first character or line of a text/plain MIME entity. Thus a text/plain MIME entity having one character has two positions, one before the first character (position 0), and one after the first character (position 1).</t>
						<t>Since positions are fragments of length zero, applications SHOULD use other methods than highlighting to indicate positions, the most obvious way being the positioning of a cursor (if the application supports the concept of a cursor).</t>
						<t>Ranges, on the other hand, identify fragments of a MIME entity that have a length that may be greater than zero. As a general principle for ranges, they specify both a lower and a upper bound. The start or the end of a range specification may be omitted, defaulting to the first repectively last position of the MIME entity. The end of a range must have a value greater than or equal to the start. A range with identical start and end is legal, and identifies a range of length 0, which is equivalent to a position.</t>
						<t>Applications that support a concept such as  highlighting SHOULD use such a concept to indicate fragments of length greater than zero to the user.</t>
						<t>For positions and ranges it is implicitly assumed that if a number is greater than the actual number of elements in the MIME entity, then it is referring to the last element of the MIME entity (see <xref target="processing"/> for details).</t>
					</section><section title="Characters and Lines" anchor="char-and-line">
						<t>The concept of positions and ranges can be applied to characters or lines. In both cases, positions indicate points between entities, while ranges identify zero or more entities by indicating positions.</t>
						<t>Character positions are numbered starting with zero (ignoring initial BOM marks or similar concepts that are not part of the actual textual content of a text/plain MIME entity), and counting each character separately, with the exception of line endings, which are always counted as one character (see <xref target="lineending"/> for details).</t>
						<t>Line positions are numbered starting with zero (with line position zero always being identical with character position zero), with <xref target="lineending"/> describing how line endings are be identified. Fragments identified by lines include the line endings, so applications identifying line-based fragments MUST include the line endings in the fragment identification they are using (e.g., the highlighted selection). If a MIME entity does not contain any line endings, then it consists of a single (the first) line.</t>
					</section>
				
				
				
			</section>
			<section title="Combining the Principles" anchor="comb-principle">
					<t>In the following sections, the principles described in the preceding section (positions/ranges and characters/lines) are combined, resulting in four use cases. The fragment identifier syntax, described in detail in <xref target="syntax"></xref>, uses various schemes for different purposes.</t>
					<section title="Character Position" anchor="charposi">
						<t>To identify a character position (i.e., a fragment of length zero between two characters), the 'char' scheme followed by a single number is used. Rather than identifying a fragment consisting of a number of characters, this method identifies a position between two characters (or before the first or after the last character). Character position counting starts with 0, so the character position before the first character of a text/plain MIME entity has the character position 0, and a MIME entity containing n distinct characters has n+1 distinct character positions, the last one having the character position n.</t>
					</section>
					<section title="Character Range" anchor="charrange">
						<t>To  identify a fragment of one or more characters (a character range), the 'char' scheme followed by a range specification is used. A character range is a consecutive region of the MIME entity that extends from the starting character position of the range to the ending character position of the range.</t>
					</section>
					<section title="Line Position" anchor="lineposi">
						<t>To identify a line position (i.e., a fragment of length zero between two lines), the 'line' scheme followed by a single number is used. Rather than identifying a fragment consisting of a number of lines, this method identifies a position between two lines (or before the first or after the last line). Line position counting starts with 0, so the line position before the first line of a text/plain MIME entity has the line position 0, and a MIME entity containing n distinct lines has n+1 distinct line positions, the last one having the line position n.</t>
					</section>
					<section title="Line Range" anchor="linerange">
						<t>To  identify a fragment of one or more lines (a line range), the 'line' scheme followed by a range specification is used. A line range is a consecutive region of the MIME entity that extends from the starting line position of the range to the ending line position of the range.</t>
					</section>
				</section><section title="Regular Expressions" anchor="regex">
					<t>A common problem with fragment identifiers is their robustness (to changes in the MIME entity), and character and line counts can break very easily. A more robust way of identifying a fragment is by searching for a specific pattern. Using the 'match' scheme, it is possible to use a Basic Regular Expression (BRE) as defined by ISO 9945-2 <xref target="ISO9945-2"/> (the POSIX standard) as a fragment identifier. For another way of making fragment identifiers more robust, see <xref target="robustness"/>.</t>
				</section><section anchor="combining" title="Combining Fragment Identification Scheme Parts">
					<t>In most cases, a fragment identifier will consist of only one fragment identification scheme part. However, by concatenating them, separated with a semicolon, it is possible to use several fragment identification scheme parts in a fragment identifier. The whole fragment identifier refers to the union of all fragments of the text/plain MIME entity identified by the individual fragment identification scheme parts. In this way, it is possible to identify disjoint ranges, such as multiple line ranges.</t>
					<t>It should be noticed that regular expressions by themselves may identify disjoint fragments, which is true in any case where the regular expression matches more than one occurrence in the MIME entity.</t>
					<t>Since disjoint fragments can be identified, implementations SHOULD make sure that these fragments are appropriately marked, for example by highlighting the fragment (rather than only scrolling to some line, which only identifies a single position in the MIME entity). If an implementation can not mark disjoint fragments, it MAY resort to marking only the first of the disjoint fragments. However, the exact method of how implementations deal with disjoint fragments depends on the application and interface, and is beyond the scope of this memo.</t>
				</section><section anchor="robustness" title="Fragment Identifier Robustness">
				<t>While regular expressions (as described in <xref target="regex"/>) may make fragment identifiers more robust than character or line counts, it is still possible that modifications of the resource will break the fragment identifier. If applications want to create more robust fragment identifiers, they may do so by adding hash sums to fragment identifiers. These hash sums are used to detect a change in the resource. Applications can then warn users about the possibility that a fragment identifier might have been broken by a modification of the resource.</t><t>Since fragment identifiers are interpreted by clients, hash sums are defined on MIME entities rather than the resource itself, and as such are specific to a certain representation of the resource, in case of text/plain resources the character encoding of the MIME entity.</t>
				<t>Hash sums may specify the character encoding that has been used when creating the hash sums, and if such a specification is present, clients MUST check whether the character encoding specified for the hash sum and the character encoding of the retrieved MIME entity are equal, and clients MUST NOT check the hash sum if these values differ. However, clients MAY choose to transcode the retrieved MIME entity in the case of differing character encodings, and after doing so, check the hash sum. Please note that this method is inhererently unreliable, because certain characters or character sequences may have been lost or normalized due to restrictions in one of the character encodings used.</t>
			</section>
		</section>
		<section title="Fragment Identification Syntax" anchor="syntax">
			<t>The syntax for the fragment identifiers is straightforward. The syntax defines four schemes, 'char', 'line', 'match', and hash (which can either be 'length' or 'md5'). The 'char' and 'line' schemes can be used in two different variants, either the position variant (with a single number), or the range variant (with two comma-separated numbers). The 'match' scheme has a regular expression as its parameter, which must be specified as a string with escaped semicolons (because the semicolon is used to concatenate multiple fragment identification scheme parts). The hash scheme can either use the 'length' or the 'md5' scheme to specify a hash value.</t>
			<t>The following syntax definition uses ABNF as defined in RFC 4234 <xref target="RFC4234"/>, including the rules DIGIT and HEXDIG.</t>
			<t>
				<figure>
					<artwork>
text-fragment =  text-scheme 0*( ";" text-scheme) 0*( ";" hash-scheme)
text-scheme   =  ( char-scheme / line-scheme / match-scheme )
hash-scheme   =  ( length-scheme / md5-scheme ) [ "," charenc ]
char-scheme   =  %x63.68.61.72 "=" ( position / range )  ; "char="
line-scheme   =  %x6C.69.6E.65 "=" ( position / range )  ; "line="
match-scheme  =  %x6D.61.74.63.68 "=" regex  ; "match="
position      =  number
range         =  (position "," [ position ]) / ("," position )
number        =  1*( DIGIT )
regex         =  StringWithEscapedSemicolon
length-scheme =  %x6C.65.6E.67.74.68 "=" number  ; "length="
md5-scheme    =  %x6D.64 "5=" md5-value  ; "md5="
md5-value     =  32HEXDIG
charenc       =  StringWithEscapedSemicolon
					</artwork>
				</figure>
			</t>
			<t>The StringWithEscapedSemicolon is a string where all characters may appear literally (except the characters which are required by the URI syntax to be escaped), with the exception of a semicolon. A semicolon that is part of the regular expression must be escaped with a leading backslash, and implementations MUST properly interpret regular expressions, dereferencing all escape mechanisms that apply, i.e. any escaping present due to the context of the URI, semicolon escaping, URI percent-encoding, and BRE escaping, in that order).</t>
			<section title="Non-ASCII Characters in Regular Expressions">
				<t>RFC 3986 <xref target="RFC3986"/> only allows a subset of ASCII as characters in URIs. Non-ASCII octets can be included using percent-encoding. Non-ASCII characters in regular expressions MUST be encoded using UTF-8  <xref target="STD63"/> before applying percent-encoding, and MUST be interpreted using UTF-8 after resolving percent-encoding. Therefore, using Internationalized Resource Identifiers (IRIs) <xref target="RFC3987"/> it is possible to use non-ASCII characters directly in regular expressions. Implementations that support plain text fragment identifiers for documents not encoded in US-ASCII SHOULD support regular expressions with non-ASCII characters, or MUST ignore such regular expressions.</t>
			</section>
			<section title="Hash Sums" anchor="hashsums">
				<t>A hash sum can either specify a MIME entity's length, or its MD5 fingerprint. In both cases, it can optionally specify the character encoding which had been used when calculating the hash sum, so that clients interpreting the fragment identifier may check whether they are using the same character encoding for their calculations. For lenghts, the character encoding can be necessary because it can influence the character count. As an example,  Unicode includes precomposed characters for writing Vietnamese, but in the windows-1258 encoding, also used for writing Vietnamese, some characters have to be encoded with separate diacritics, which means that two characters are counted. Applying Unicode terminology, this means that the length of a text/plain MIME entity is computed based on its "code points". For MD5 fingerprints, the character encoding is necessary because the MD5 algorithm works on the binary representation of the text/plain resource.</t>
				<t>The length of a text/plain MIME entity is calculated by using the principles defined in <xref target="char-and-line"/>. The MD5 fingerprint of a text/plain MIME entity is calculated by using the algorithm presented in <xref target="RFC1321"/>, encoding the result in 16 hexadecimal digits (using uppercase or lowercase letters) as a representation of the 128 bits which are the result of the MD5 algorithm.</t>
			</section>
		</section>
		<section title="Fragment Identifier Processing" anchor="processing">
			<section title="Handling of Line Endings in text/plain MIME Entities" anchor="lineending">
					<t>In Internet messages, line endings in text/plain MIME entities are represented by CR+LF character sequences (see RFC 2046 <xref target="RFC2046"/> and RFC 3676 <xref target="RFC3676"/>). However, some protocols (such as HTTP) in addition allow other conventions for line breaks. Also, some operating systems store text/plain entities locally with different line endings (in most cases, Unix uses LF, MacOS uses CR, and Windows uses CR+LF).</t><t>Independent of the number of bytes or characters used to represent a line ending, each line ending MUST be counted as one single character. For the purpose of regular expression matching, all representations of line endings MUST be treated as single LF characters (matched by \n). Implementations interpreting text/plain fragment identifiers MUST take into account the line ending conventions of the protocols and other contexts that they work in.</t><t>As an example, an implementation working in the context of a Web browser supporting http: URIs has to support the various line ending conventions permitted by HTTP. As another example, an implementation used on local files (e.g. with the file: URI scheme) has to support the conventions used for local storage. All implementations SHOULD support the Internet-wide CR+LF line ending convention, and MAY support additional conventions not related to the protocols or systems they work with.</t>
					<t>Implementers should be aware of the fact that line endings in plain text entities can  be represented by other characters or character sequences than CR+LF. Besides the abovementioned CR and LF, there are also  NEL and CR+NEL. In general, the encoding of line endings can  also depend on the character encoding of the MIME entity, and implementations have to take this into account where necessary.</t>
					
				</section><section title="Handling of Position Values" anchor="position-handling">
				<t>If any position value (as a position or as part of a range) is greater than the length of the actual MIME entity, then it identifies the last character or line position of the MIME entity. If the first position value in a range is not present, then the range extends from the start of the MIME entity. If the second position value in a range is not present, then the range extends to the end of the MIME entity. If a range scheme's positions are not properly ordered (ie, the first number is less than the second), then this scheme part MUST be ignored.</t>
			</section>
			<section title="Handling of Hash Sums" anchor="hash-handling">
				<t>Clients are not required to implement the handling of hash sums, so they MAY choose to ignore hash sum information altogether. However, if they do implement hash sum handling, the following applies:</t>
				<t>If a fragment identifier contains a hash sum, and a client retrieves a MIME entity and detects that the hash sum has changed (observing the character encoding specification as described in <xref target="hashsums"/>, if present), then the client SHOULD NOT interpret any other text/plain fragment identifier scheme part. A client MAY signal this situation to the user.</t>
			</section>
			<section title="Syntax Errors in Fragment Identifiers" anchor="error-handling">
				<t>If a fragment identifier contains a syntax error (i.e., does not conform to the syntax specified in <xref target="syntax"/>), then it MUST be ignored by clients. Clients SHOULD NOT make any attempt to correct or guess fragment identifiers. Syntax errors MAY be reported by clients.</t>
			</section>
		</section>
		<section title="Examples" anchor="examples">
			<t>The following examples show some usages for the fragment identifiers defined in this memo.</t>
			<t>
				<figure>
					<artwork>
http://example.com/text.txt#char=100
					</artwork>
				</figure>
			</t>
			<t>This URI identifies the position after the 100th character of the text.txt MIME entity. It should be noted that it is not clear which octet(s) of the MIME entity this will be without retrieving the MIME entity and thus knowing which character encoding it is using (in case of HTTP, this information will be given in the Content-Type header of the response). If the MIME entity has fewer than 100 characters, the URI identifies the position after the MIME entity's last character.</t>
			<t>
				<figure>
					<artwork>
ftp://example.com/text.txt#line=10,20
					</artwork>
				</figure>
			</t>
			<t>This URI identifies lines 11 to 20 of the text.txt MIME entity. If the MIME entity has fewer than 11 lines, it identifies the position after last line. If the MIME entity has less than 20 but at least 11 lines, it identifies the lines 11 to the last line of the MIME entity.</t>
			<t>
				<figure>
					<artwork>
http://example.com/text.txt#match=searchterm
					</artwork>
				</figure>
			</t>
			<t>This URI identifies all occurrences of the regular expression 'searchterm' in the MIME entity, i.e., all occurrences of the string 'searchterm'. If there is more than one occurrence, then this URI identifies a disjoint fragment, consisting of all of these occurrences. If there is no occurrence of the search term, the URI does not identify a fragment.</t>
			<t>
				<figure>
					<artwork>
ftp://example.com/text.txt#line=,1;match=searchterm
					</artwork>
				</figure>
			</t>
			<t>This URI identifies the first line and all occurrences of the regular expression 'searchterm' in the MIME entity. If there is an occurrence of 'searchterm' outside of the first line, then this URI identifies a disjoint fragment.</t>
			<t>
				<figure>
					<artwork>
http://example.com/text.txt#match=hello\;
					</artwork>
				</figure>
			</t>
			<t>This URI identifies all occurrences of the regular expression 'hello;' in the MIME entity. The semicolon with the leading backslash has to be interpreted as a literal semicolon inside of the BRE, treating the '\;' as an escaped ';', so that the actual regular expression is 'hello;'.  If there is more than one occurrence of this regular expression, then this URI identifies a disjoint fragment, consisting of all of these occurrences.</t>
			<t>
				<figure>
					<artwork>
ftp://example.com/text.txt#line=10,20;length=9876,UTF-8
					</artwork>
				</figure>
			</t>
			<t>As in the second example, this URI identifies lines 11 to 20 of the text.txt MIME entity. The additional length hash sum specifies that the MIME entity has a length of 9876 characters when encoded in UTF-8. If the client supports the length hash sum scheme, it may test the retrieved MIME entity for its length, but only if the retrieved MIME entity uses the UTF-8 encoding or has been locally trancoded into this encoding. If the length of the retrieved MIME entity does not match the length specified in the fragment identifier, the client SHOULD NOT interpret the line part and MAY signal this to the user.</t>
		</section><section title="IANA Considerations"><t>Note to RFC Editor: Please change this section to read as follows after the IANA action has been completed: "IANA has added a reference to this specification in the Text/Plain
   Media Type registration."</t><t>IANA is requested to update the registration of the MIME Media type text/plain at http://www.iana.org/assignments/media-types/text/ with the fragment identifier defined in this memo by adding a reference to this memo (with the appropriate RFC number once it is known).</t></section>
		<section title="Security Considerations" anchor="security">
			<t>Regular expression matching code is notoriously vulnerable to buffer overflow security holes, so any implementation supporting text/plain fragment identifiers SHOULD make sure that the code being used has been tested against buffer overflow attacks.</t><t>The fact that software implementing fragment identifiers for plain text and software not implementing them differs in behavior, and the fact that different software may show fragments to users in different ways (in particular for fragments consisting of multiple ranges) can lead to misunderstandings on the part of users. Such misunderstandings might be exploited in a way similar to spoofing or phishing, although concrete examples of how this might be done are not currently known.</t><t>Implementers and users of fragment identifiers for plain text should also be aware of the security considerations in RFC 3986 <xref target="RFC3986"></xref> and RFC 3987 <xref target="RFC3987"></xref>.</t>
		</section>
		<section title="Change Log">
		<t>Note to RFC Editor: Please remove this section before publication.</t>
			<section title="From -05 to -06">
				<t>
					<list style="symbols">
						
						<t>Clarified that this is intended as an update of the text/plain MIME type registration, in newly added IANA consideration section and elswhere.</t><t>Added normative reference to UTF-8 (STD63/RFC3629).</t><t>Fixed section about non-ASCII characters in regular expressions to be more accurate re. IRIs.</t><t>Fixed some text about decomposition and Unicode.</t><t>Clarified that UTF-16 can also use 4 octets per character.</t><t>Changed ABNF to make sure schemes are case-sensitive (string literals in ABNF are case-insensitive).</t><t>Used HEXDIG from RFC 4234, made clear DIGIT and HEXDIG are from that spec.</t><t>Speficied order of decoding the various escapings.</t><t>Moved section on line endings to the back, and changed requirements to be more in line with practice.</t><t>Added IANA Consideration section.</t><t>Expanded Security Consideration section.</t><t>Removed quote from RFC 3986, because the quoted text doesn't actually exist there anymore; changed text appropriately.</t><t>Reorganized section two to get rid of one section level.</t>
					<t>Added overview in introduction, and some glue text here and there.</t><t>Changed to more IETF-like wording in some instances (e.g. intro to this section; removing "Compliant software MUST follow this specification." at the start of the Introduction,...).</t><t>Removed 'where to send comments' section.</t><t>Fixed wording is some cases, tried to make shorter sentences and eliminate parenthetesized expressions.</t><t>Removed acknowledgement for xml2rfc; we are nevertheless very grateful for this work!</t></list>
				</t>
			</section><section title="From -04 to -05">
				<t>
					<list style="symbols">
						<t>Added some explanatory text to the last paragraph of <xref target="robustness"/>.</t>
						<t>Added a paragraph about the importance of having fragment identification capabilities for out-of-line linking methods such as XLink to <xref target="why"/>.</t>
						<t>Added explanation of why the charset is important for length hash sums to <xref target="hashsums"/>.</t>
						<t>Added text that makes hash sum handling optional and allows clients to interpret fragment identifiers even if the hash sum did not match (changed MUST NOT to SHOULD NOT) to <xref target="hash-handling"/>.</t>
						<t>Added example using a length hash sum in <xref target="examples"/>.</t>
						<t>RFC 2234 (ABNF) has been obsoleted by <xref target="RFC4234"/>.</t>
						<t>Removed the "Open Issues" section for preparation of final draft before submission as RFC.</t>
					</list>
				</t>
			</section>
			<section title="From -03 to -04">
				<t>
					<list style="symbols">
						<t>URIs are now defined by RFC 3986 <xref target="RFC3986"/>, so the text and the references have been updated. In particular, RFC3986 defines a fragment identifier to be part of the URI, whereas in the obsoleted RFC 2396 URI specification, it was not part of a URI as such, but of a "URI reference".</t>
						<t>IRIs are now defined by RFC 3987 <xref target="RFC3987"/>, so the text and the references have been updated.</t>
						<t>Changed IPR clause from RFC 3667 to RFC 3978 (updated version of RFC 3667).</t>
					</list>
				</t>
			</section>
			<section title="From -02 to -03">
				<t>
					<list style="symbols">
						<t>Replaced most occurrences of 'resource' with 'MIME entity', because the result of dereferencing a URI is not the resource itself, but some MIME entity (in our case of type text/plain) representing it. Thanks to Sandro Hawke for pointing this out.</t>
						<t>Moved "Open Issues" to the very back of the document.</t>
						<t>Added <xref target="processing"/> to define the processing model for fragment identifiers (moved <xref target="position-handling"/> from <xref target="syntax"/> to <xref target="processing"/>).</t>
						<t>Added hash scheme to make fragment identifiers more robust (<xref target="robustness"/>).</t>
						<t>Changed IPR clause from RFC 2026 to RFC 3667 (updated version of RFC 2026).</t>
					</list>
				</t>
			</section>
			<section title="From -01 to -02">
				<t>
					<list style="symbols">
						<t>Fundamental change in semantics: counts turn into positions (between characters or lines), so in order to identify a character or line, ranges must be used (which now use positions to specify the upper and lower bounds of the range).</t>
						<t>Made the first value of a range optional as well, so that line=,5 also is legal, identifying everything from the start of the MIME entity to the 5th line.</t>
						<t>Changed the syntax from paranthesis-style to a more traditional style using equals-signs.</t>
					</list>
				</t>
			</section>
			<section title="From -00 to -01">
				<t>
					<list style="symbols">
						<t>Made the second count value of ranges optional, so that something like line(10,) is legal and properly defined.</t>
						<t>Added non-normative reference to Internet draft about non-ASCII characters in search strings.</t>
						<t>Added <xref target="incremental"/> about incremental deployement.</t>
						<t>Added more elaborate examples.</t>
						<t>Added text about regex buffer overflow problems in <xref target="security"/>.</t>
						<t>Added <xref target="lineending"/> about line endings in text/plain resources.</t>
						<t>Added "Open Issues" to collect open issues regarding this memo (will be deleted in final RFC text).</t>
					</list>
				</t>
			</section>
		</section>
<!--
		<section anchor="issues" title="Open Issues">
			<t>This section will not be part of the final RFC text, it serves as a container to collect to-dos (<xref target="todo"/>) and open questions (<xref target="questions"/>) regarding this memo.</t>
			<section anchor="todo" title="To Do">
				<t>
					<list style="symbols">
						<t>Provide more complex example(s).</t>
					</list>
				</t>
			</section>
			<section anchor="questions" title="Open Questions">
				<t>
					<list style="symbols">
						<t>Escaping a semicolon in a regex (so that it is interpreted literally) is now done by using a leading backslash. Shouldn't that be changed to the more URI-style way of percent-encoding it, if it should appear literally?</t>
						<t>Should regex ranges be allowed (ie, a fragment ranging from one regex match to another regex match)? mjd: no, regexps are already a high potential burden on implementers, and regexp ranges can be expressed with regexes anyway.</t>
						<t>Should a more sophisticated regex mechanism than BREs be used? mjd: Not sure, but I think no.</t>
						<t>Regexes by themselves may identify disjoint sub-resources. Should there be a mechanism to say something like "the 5th appearance of the following regex"? Or are users responsible for composing regexes which do not need this kind of additional mechanism? mjd: the later.</t>
						<t>Is the concatenation of scheme parts (<xref target="combining"/>) and its semantics of joining the individual fragments a good thing? Or a bad thing? mjd: slightly overengineered, let's see.</t>
						<t>Should there be more schemes? Or less? mjd: definitely not more. Let's see how much gets implemented.</t>
						<t>Is it necessary to mention that applications must be able to transcode characters, because the text file and the fragment identifier may use different character encodings? What about character normalization? Should that be addressed or at least mentioned as being out of scope? mjd: This is clearer now, except for normalization, which I think we can ignore.</t>
						<t>MD5 values are now specified as 32 hex digits. An alternative would be the representation as specified by <xref target="RFC1864"/>, which defines base64 encoding for the 128 bits of the checksum. Should both forms be allowed (hex and base64) or is one enough? If only one, is hex the right choice? mjd: one for is enough, let's stick with it.</t>
					</list>
				</t>
			</section>
		</section>
-->
	</middle>
	<back>
		<references title="Normative References">
			<reference anchor="ISO9945-2">
				<front>
					<title>Information technology - Portable Operating System Interface (POSIX) - Part 2: Shell and Utilities</title>
					<author>
						<organization>International Organization for Standardization</organization>
					</author>
					<date year="1993"/>
				</front>
				<seriesInfo name="ISO" value="9945-2"/>
			</reference>
			<reference anchor="RFC1321">
				<front>
					<title abbrev="MD5">The MD5 Message-Digest Algorithm</title>
					<author initials="R. L." surname="Rivest" fullname="Ronald L. Rivest">
						<organization/>
					</author>
					<date month="April" year="1992"/>
				</front>
				<seriesInfo name="RFC" value="1321"/>
			</reference><reference anchor="RFC2045">
				<front>
					<title abbrev="Internet Message Bodies">Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
					<author initials="N." surname="Freed" fullname="Ned Freed">
						<organization>Innosoft International, Inc.</organization>
						<address>
							<postal>
								<street>1050 East Garvey Avenue South</street>
								<city>West Covina</city>
								<region>CA</region>
								<code>91790</code>
								<country>US</country>
							</postal>
							<phone>+1 818 919 3600</phone>
							<facsimile>+1 818 919 3614</facsimile>
							<email>ned@innosoft.com</email>
						</address>
					</author>
					<author initials="N.S." surname="Borenstein" fullname="Nathaniel S. Borenstein">
						<organization>First Virtual Holdings</organization>
						<address>
							<postal>
								<street>25 Washington Avenue</street>
								<city>Morristown</city>
								<region>NJ</region>
								<code>07960</code>
								<country>US</country>
							</postal>
							<phone>+1 201 540 8967</phone>
							<facsimile>+1 201 993 3032</facsimile>
							<email>nsb@nsb.fv.com</email>
						</address>
					</author>
					<date month="November" year="1996"/>
				</front>
				<seriesInfo name="RFC" value="2045"/>
			</reference>
			<reference anchor="RFC2046">
				<front>
					<title abbrev="Media Types">Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</title>
					<author initials="N." surname="Freed" fullname="Ned Freed">
						<organization>Innosoft International, Inc.</organization>
						<address>
							<postal>
								<street>1050 East Garvey Avenue South</street>
								<city>West Covina</city>
								<region>CA</region>
								<code>91790</code>
								<country>US</country>
							</postal>
							<phone>+1 818 919 3600</phone>
							<facsimile>+1 818 919 3614</facsimile>
							<email>ned@innosoft.com</email>
						</address>
					</author>
					<author initials="N." surname="Borenstein" fullname="Nathaniel S. Borenstein">
						<organization>First Virtual Holdings</organization>
						<address>
							<postal>
								<street>25 Washington Avenue</street>
								<city>Morristown</city>
								<region>NJ</region>
								<code>07960</code>
								<country>US</country>
							</postal>
							<phone>+1 201 540 8967</phone>
							<facsimile>+1 201 993 3032</facsimile>
							<email>nsb@nsb.fv.com</email>
						</address>
					</author>
					<date month="November" year="1996"/>
				</front>
				<seriesInfo name="RFC" value="2046"/>
			</reference>
			<reference anchor="RFC2119">
				<front>
					<title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
					<author initials="S." surname="Bradner" fullname="Scott Bradner">
						<organization>Harvard University</organization>
						<address>
							<postal>
								<street>1350 Mass. Ave.</street>
								<street>Cambridge</street>
								<street>MA 02138</street>
							</postal>
							<phone>- +1 617 495 3864</phone>
						</address>
					</author>
					<date month="March" year="1997"/>
				</front>
				<seriesInfo name="RFC" value="2119"/>
			</reference><reference anchor="RFC3676">
				<front>
					<title>The Text/Plain Format and DelSp Parameters</title>
					<author initials="R." surname="Gellens" fullname="Randall Gellens">
						<organization>QUALCOMM Incorporated</organization>
						<address>
							<postal>
								<street>5775 Morehouse Drive</street>
								<city>San Diego</city>
								<region>CA</region>
								<code>92121-2779</code>
								<country>US</country>
							</postal>
							<phone>+1 619 651 5115</phone>
							<email>randy@qualcomm.com</email>
						</address>
					</author>
					<date month="February" year="2004"/>
				</front>
				<seriesInfo name="RFC" value="3676"/>
			</reference>
			<reference anchor="RFC3986">
				<front>
					<title abbrev="URI Generic Syntax">Uniform Resource Identifier (URI): Generic Syntax</title>
					<author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
						<organization>World Wide Web Consortium</organization>
						<address>
							<postal>
								<street>Massachusetts Institute of Technology</street>
								<street>77 Massachusetts Avenue</street>
								<city>Cambridge</city>
								<region>MA</region>
								<code>02139</code>
							</postal>
							<phone>+1-617-253-5702</phone>
							<facsimile>+1-617-258-5999</facsimile>
							<email>timbl@w3.org</email>
						</address>
					</author>
					<author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
						<organization>Day Software</organization>
						<address>
							<postal>
								<street>5251 California Ave., Suite 110</street>
								<city>Irvine</city>
								<region>CA</region>
								<code>92617</code>
							</postal>
							<phone>+1-949-679-2960</phone>
							<facsimile>+1-949-679-2972</facsimile>
							<email>fielding@gbiv.com</email>
						</address>
					</author>
					<author initials="L." surname="Masinter" fullname="Larry Masinter">
						<organization>Adobe Systems Incorporated</organization>
						<address>
							<postal>
								<street>345 Park Ave</street>
								<city>San Jose</city>
								<region>CA</region>
								<code>95110</code>
							</postal>
							<phone>+1-408-536-3024</phone>
							<email>LMM@acm.org</email>
						</address>
					</author>
					<date month="January" year="2005"/>
				</front>
				<seriesInfo name="RFC" value="3986"/>
			</reference>
			<reference anchor="RFC3987">
				<front>
					<title>Internationalized Resource Identifiers (IRI)</title>
					<author initials="M." surname="Duerst" fullname="Martin Duerst">
						<organization/>
					</author>
					<author initials="M." surname="Suignard" fullname="Michel Suignard">
						<organization/>
					</author>
					<date month="January" year="2005"/>
				</front>
				<seriesInfo name="RFC" value="3987"/>
			</reference><reference anchor="RFC4234">
				<front>
					<title>Augmented BNF for Syntax Specifications: ABNF</title>
					<author initials="D. H." surname="Crocker" fullname="David H. Crocker">
						<organization>Brandenburg InternetWorking</organization>
					</author>
					<author initials="P." surname="Overell" fullname="Paul Overell">
						<organization>THUS plc.</organization>
					</author>
					<date month="October" year="2005"/>
				</front>
				<seriesInfo name="RFC" value="4234"/>
			</reference>
			
			
			
			
		<reference anchor="STD63">
				<front>
					<title>UTF-8, a transformation format of ISO 10646</title>
					<author initials="F." surname="Yergeau" fullname="Francois Yergeau">
						<organization>Alis Technologies</organization>
					</author>
					<date month="November" year="2003"/>
				</front>
				<seriesInfo name="STD" value="63"/><seriesInfo name="RFC" value="3629"/>
				
			</reference></references>
		<references title="Non-Normative References">
			<reference anchor="RFC2854">
				<front>
					<title>The 'text/html' Media Type</title>
					<author initials="D." surname="Connolly" fullname="D. Connolly">
						<organization/>
					</author>
					<author initials="L." surname="Masinter" fullname="L. Masinter">
						<organization/>
					</author>
					<date month="June" year="2000"/>
				</front>
				<seriesInfo name="RFC" value="2854"/>
			</reference>
			<!--<reference anchor="RFC2629">
				<front>
					<title>Writing I-Ds and RFCs using XML</title>
					<author initials="M. T." surname="Rose" fullname="Marshall T. Rose">
						<organization>Invisible Worlds, Inc.</organization>
						<address>
							<postal>
								<street>660 York Street</street>
								<city>San Francisco</city>
								<region>CA</region>
								<code>94110</code>
								<country>US</country>
							</postal>
							<phone>+1 415 695 3975</phone>
							<email>mrose@not.invisible.net</email>
							<uri>http://invisible.net/</uri>
						</address>
					</author>
					<date month="June" year="1999"/>
				</front>
				<seriesInfo name="RFC" value="2629"/>
			</reference>-->
			<reference anchor="RFC2781">
				<front>
					<title>UTF-16, an encoding of ISO 10646</title>
					<author initials="P." surname="Hoffman" fullname="Paul Hoffman">
						<organization>Internet Mail Consortium</organization>
						<address>
							<postal>
								<street>127 Segre Place</street>
								<city>Santa Cruz</city>
								<region>CA</region>
								<code>95060</code>
								<country>US</country>
							</postal>
							<phone/>
							<email>phoffman@imc.org</email>
						</address>
					</author>
					<author initials="F." surname="Yergeau" fullname="Francois Yergeau">
						<organization>Alis Technologies</organization>
						<address>
							<postal>
								<street>100, boul. Alexis-Nihon</street>
								<street>Suite 600</street>
								<city>Montreal</city>
								<region>Quebec</region>
								<code>H4M 2P2</code>
								<country>CA</country>
							</postal>
							<phone/>
							<email>fyergeau@alis.com</email>
						</address>
					</author>
					<date month="February" year="2000"/>
				</front>
				<seriesInfo name="RFC" value="2781"/>
			</reference>
<!--
			<reference anchor="RFC1864">
				<front>
					<title abbrev="Content-MD5">The Content-MD5 Header Field</title>
					<author initials="J. G." surname="Myers" fullname="John Gardiner Myers">
						<organization/>
					</author>
					<author initials="M. T." surname="Rose" fullname="Marshall T. Rose">
						<organization>Invisible Worlds, Inc.</organization>
						<address>
							<postal>
								<street>660 York Street</street>
								<city>San Francisco</city>
								<region>CA</region>
								<code>94110</code>
								<country>US</country>
							</postal>
							<phone>+1 415 695 3975</phone>
							<email>mrose@not.invisible.net</email>
							<uri>http://invisible.net/</uri>
						</address>
					</author>
					<date month="October" year="1995"/>
				</front>
				<seriesInfo name="RFC" value="1864"/>
			</reference>
-->
			<reference anchor="XLink">
				<front>
					<title abbrev="XLink">XML Linking Language (XLink) Version 1.0</title>
					<author initials="S." surname="DeRose" fullname="Steve DeRose">
						<organization>Brown University Scholarly Technology Group</organization>
					</author>
					<author initials="E." surname="Maler" fullname="Eve Maler">
						<organization>Sun Microsystems</organization>
					</author>
					<author initials="D." surname="Orchard" fullname="David Orchard">
						<organization>Jamcracker</organization>
					</author>
					<date month="June" year="2001"/>
				</front>
				<seriesInfo name="W3C Recommendation" value="REC-xlink-20010627"/>
			</reference>
			<reference anchor="TypeReg">
				<front>
					<title abbrev="Media Type Registration">Media Type Specifications and Registration Procedures</title>
					<author initials="N." surname="Freed" fullname="Ned Freed">
						<organization>Sun Microsystems</organization>
					</author>
					<author initials="J." surname="Klensin" fullname="John C. Klensin">
						<organization/>
					</author>
					<date month="December" year="2005"/>
				</front>
				<seriesInfo name="RFC" value="4288"/>
			</reference>
		</references>
		
		<section title="Acknowledgements">
			
			<t>Thanks for comments and suggestions provided by Marcel Baschnagel, John Cowan, Benja Fallenstein, Sandro Hawke, Dan Kohn, Henrik Levkowetz, and Ted Hardie.</t>
		</section>
	</back>
</rfc>
