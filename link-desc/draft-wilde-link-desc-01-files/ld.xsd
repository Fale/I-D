<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="urn:ietf:rfc:XXXX" xmlns:ld="urn:ietf:rfc:XXXX">
    <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/xml.xsd">
        <xs:annotation>
            <xs:documentation>Get access to the xml: attribute groups for xml:lang as declared on 'documentation' below.</xs:documentation>
        </xs:annotation>
    </xs:import>
    <xs:element name="link" type="ld:link-type"> </xs:element>
    <xs:simpleType name="uriTemplate">
        <xs:annotation>
            <xs:documentation>Representing the type for URI template values according to RFC 6570. This is probably too complicated to cover with a regular expression in any reasonable way, so type enforcement is not done by the schema.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:element name="documentation" id="documentation">
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any processContents="lax"/>
            </xs:sequence>
            <xs:attribute name="source" type="xs:anyURI"/>
            <xs:attribute ref="xml:lang"/>
            <xs:anyAttribute namespace="##other" processContents="lax"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="link-type">
        <xs:sequence>
            <xs:element ref="ld:documentation" maxOccurs="unbounded" minOccurs="0"/>
            <xs:choice maxOccurs="unbounded" minOccurs="0">
                <xs:element ref="ld:var"/>
                <xs:element ref="ld:hint"/>
                <xs:element name="allow">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element maxOccurs="unbounded" minOccurs="0" ref="ld:documentation"/>
                            <xs:choice maxOccurs="unbounded" minOccurs="0">
                                <xs:element ref="ld:var"/>
                                <xs:element ref="ld:hint"/>
                            </xs:choice>
                        </xs:sequence>
                        <xs:attribute name="method">
                            <xs:simpleType>
                                <xs:list itemType="xs:token"/>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="hreft" type="ld:uriTemplate" use="optional"/>
        <xs:attribute name="href" type="xs:anyURI" use="optional"/>
    </xs:complexType>
    <xs:element name="var">
        <xs:complexType>
            <xs:sequence maxOccurs="unbounded" minOccurs="1">
                <xs:element ref="ld:documentation" maxOccurs="unbounded" minOccurs="0"/>
                <xs:any namespace="##other" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>If variables are restricted in ways other than the simple type restrictions that are built into link descriptions, then these restrictions can be embedded in a variable description as well, as long as they are represented using a different namespace.</xs:documentation>
                    </xs:annotation>
                </xs:any>
            </xs:sequence>
            <xs:attribute name="name" use="required"/>
            <xs:attribute name="concept" type="xs:anyURI" use="optional">
                <xs:annotation>
                    <xs:documentation>Identifies the variable by referring to a concept URI.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="default" type="xs:anySimpleType" use="optional">
                <xs:annotation>
                    <xs:documentation>Defines the default value for the variable (used by the service if no value is provided). The value must match the type defined for the variable.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="hint">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="ld:documentation"/>
            </xs:sequence>
            <xs:attribute name="name" use="required">
                <xs:annotation>
                    <xs:documentation>A hint is either a registered hint with a simple name (defined by a regular expression), or an unregistered hint which is identified by URI.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:union memberTypes="xs:anyURI">
                        <xs:simpleType>
                            <xs:restriction base="xs:token">
                                <xs:annotation>
                                    <xs:documentation>The list of "registered link hints" is taken from http://tools.ietf.org/html/draft-nottingham-link-hint-00#section-3 and will probably change.</xs:documentation>
                                </xs:annotation>
                                <xs:enumeration value="allow"/>
                                <xs:enumeration value="formats"/>
                                <xs:enumeration value="links"/>
                                <xs:enumeration value="accept-post"/>
                                <xs:enumeration value="accept-patch"/>
                                <xs:enumeration value="accept-ranges"/>
                                <xs:enumeration value="accept-prefer"/>
                                <xs:enumeration value="precondition-req"/>
                                <xs:enumeration value="auth-scheme"/>
                                <xs:enumeration value="status"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:union>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="value"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
